#' @param outlist default FALSE indicates to combine plots for all risk factors into one. outlist=T indicates to output as a list of plots
#' @param ci_level numerical value for credible interval percentage (default 80)
#' @param ... Arguments passed to ggplot
#' @return Diffsig plot
#'
diffsig_plot <- function(fit, pars, signature_labels, riskfactor_labels,
est_color=NULL, colors=NULL,ncol=1,outlist=FALSE,ci_level=80) {
require(rstan, quietly = T)
require(viridis, quietly = T)
## Errors and warnings
if(length(pars)!=length(signature_labels)*length(riskfactor_labels)) {
stop("Number of parameters incorrect. length(pars) should equal to length(signature_labels)*length(riskfactor_labels).")
}
if(!is.null(est_color)) {
if(length(est_color)!=1) {
stop("Only 1 color can be specified for the estimation point est_color")
}
}
if(!is.null(colors)) {
if(length(unique(riskfactor_labels))!=length(colors)) {
warning("Number of colors does not match the number of unique groups from riskfactor_labels")
}
}
## Setup data
if(is.null(est_color)) {
est_color <- "#FFC20A"
}
ci_low = (100-ci_level)/2/100
ci_up = 1-ci_low
statmat <- summary(fit, probs=c(ci_low,0.25,0.5,0.75,ci_up))$summary[,c("mean","10%", "25%", "50%", "75%", "90%")]
statmat <- statmat[pars,]
number_signatures <- length(signature_labels)
number_riskfactors <- length(riskfactor_labels)
statlist <- list()
for (i in 1:number_riskfactors) {
statlist[[i]] <- statmat[(number_signatures*i-(number_signatures-1)):(number_signatures*i),]
}
y <- as.numeric(seq(number_signatures, 1, by = -1))
xlim.use <- c(min(statmat[, 2L]), max(statmat[, 6L]))
xlim.use <- xlim.use + diff(xlim.use) * c(-0.05, 0.05)
p.list <- list()
for (i in 1:number_riskfactors) {
xy.df <- data.frame(params = rownames(statlist[[i]]), y, statlist[[i]])
xy.df$group <- rep(riskfactor_labels[[i]], times=number_signatures)
colnames(xy.df) <- c("params", "y", "mean", "ll", "l", "m", "h", "hh","group")
p.base <- ggplot2::ggplot(xy.df)
p.name <- ggplot2::scale_y_continuous(breaks = y,
labels = signature_labels,
limits = c(0.8, y + 0.2))
p.all <- p.base + ggplot2::xlim(xlim.use) + p.name + geom_vline(xintercept=0, linetype="dashed",color="darkgrey") +
theme_bw()
p.ci <- ggplot2::geom_segment(mapping = ggplot2::aes_string(x = "ll", xend = "hh", y = "y", yend = "y"))
p.list[[i]] <- p.all + p.ci +
theme(panel.grid.major.y = element_line(colour="white", size=0.1),
panel.grid.minor.y = element_line(colour='grey', linetype='dashed', size=0.2))
}
## Colors not specified
if(is.null(colors)) {
color_by <- c("#929292","#2484F6","#00AD35","#E84A35","#CA001C","#C50077","#7C00FF")
for(i in 1:number_riskfactors) {
p.ci.2 <- ggplot2::geom_segment(ggplot2::aes_string(x = "l", xend = "h", y = "y", yend = "y"), color = color_by[i], size = 3)
p.point <- ggplot2::geom_point(ggplot2::aes_string(x = "m", y = "y"), shape = 19, color=color_by[i], size = 3, show.legend = F)
p.point2 <- ggplot2::geom_point(ggplot2::aes_string(x = "m", y = "y"), shape = 19, color=est_color, size = 2)
p.list[[i]] <- p.list[[i]] +
p.ci.2 +
p.point +
p.point2 +
xlab(expression(beta)) +
labs(caption=riskfactor_labels[i]) +
theme(
panel.grid.minor.x = element_blank(),
axis.title.x = element_text(angle = 0, hjust=1,margin = margin(t = -2, r = 0, b = 0, l = 0)),
axis.title.y = element_blank(),
axis.ticks.y = element_blank(),
axis.line.x = element_line(arrow = grid::arrow(length = unit(0.3, "cm"),
ends = "both"), color="grey27"),
axis.text.x = element_text(size="10"),
panel.grid.major.x = element_line(),
plot.margin = margin(t = 5,  # Top margin
r = 10,  # Right margin
b = 5,  # Bottom margin
l = 5),
panel.border = element_blank(),
legend.margin = margin(t=-15),
plot.caption=element_text(size=12, hjust=0.5, vjust=2, margin=margin(0,0,0,0))) +
guides(colour = guide_legend(ncol = 3))
}
} else {
if(length(colors)!=length(riskfactor_labels)) {
stop("Length of colors should match the number of unique groups in riskfactor_labels")
}
for (i in 1:number_riskfactors) {
p.ci.2 <- ggplot2::geom_segment(ggplot2::aes(x = l, xend = h, y = y, yend = y), color = colors[i], size = 3)
p.point <- ggplot2::geom_point(ggplot2::aes(x = m, y = y), color=colors[i], shape = 19, size = 3, show.legend = F)
p.point2 <- ggplot2::geom_point(ggplot2::aes_string(x = "m", y = "y"), color = est_color, shape = 19, size = 2)
p.list[[i]] <- p.list[[i]] +
p.ci.2 +
p.point +
p.point2 +
xlab(expression(beta)) +
labs(caption=riskfactor_labels[i]) +
theme(
panel.grid.minor.x = element_blank(),
axis.title.x = element_text(angle = 0, hjust=1,margin = margin(t = -2, r = 0, b = 0, l = 0)),
axis.title.y = element_blank(),
axis.ticks.y = element_blank(),
axis.line.x = element_line(arrow = grid::arrow(length = unit(0.3, "cm"),
ends = "both"), color="grey27"),
axis.text.x = element_text(size="10"),
panel.grid.major.x = element_line(),
plot.margin = margin(t = 5,  # Top margin
r = 10,  # Right margin
b = 5,  # Bottom margin
l = 5),
panel.border = element_blank(),
legend.position = "none",
plot.caption=element_text(size=12, hjust=0.5, vjust=2, margin=margin(0,0,0,0)))
}
}
if (outlist==TRUE) {
(p = p.list)
} else {
(p=cowplot::plot_grid(plotlist=p.list, ncol = ncol))
}
# pp = ggplot_build(p)
# ## re-label y-axis with names
# pp$layout$panel_params[[1]]$y.sec$scale$labels <- signature_labels
# ppp <- ggplot_gtable(pp)
# p_fin <- as.ggplot(ppp)
return(p)
}
diffsig_plot(fit,
pars=1:numpars,
ci_level = 80,
signature_labels = c("SBS1","SBS2","SBS3","SBS5","SBS13"),
riskfactor_labels = c("intercept","cont1","cont2"),
ncol=3, outlist = F)
numpars = ncol(simdat$truebeta)*ncol(simdat$truebeta) #15
diffsig_plot(fit,
pars=1:numpars,
ci_level = 80,
signature_labels = c("SBS1","SBS2","SBS3","SBS5","SBS13"),
riskfactor_labels = c("intercept","cont1","cont2"),
ncol=1, outlist = F)
1:numpars
fit <- diffsig_fit(X=simdat$X, Y=simdat$Y, C=C_k, beta_sd=0.5,
chains=4, cores=4, seed=123)
simdat = simdat_gen(N=N, K=K, truetau=truetau, C=C_k,
continuous=2, binary=NA, categorical=NA, cat_levels=NA, seed=123)
fit <- diffsig_fit(X=simdat$X, Y=simdat$Y, C=C_k, beta_sd=0.5,
chains=4, cores=4, seed=123)
getwd()
fit <- stan(
file = "~/inst/stan/diffsig.stan",  # Stan program
data = list(K=ncol(C),M=nrow(X),L=nrow(C_k),Y=simdat$Y,N=ncol(Y),C=C_k,X=simdat$X, beta_sd=0.5),
include = T,
pars = c("beta","tau"),
# init=0,
chains = 4,             # number of Markov chains
warmup = 1000,          # number of warmup iterations per chain
iter = 2000,            # total number of iterations per chain
cores = 4,              # number of cores (could use one per chain)
refresh = 200,             # no progress shown
verbose = T
)
simdat$X
fit <- stan(
file = "~/inst/stan/diffsig.stan",  # Stan program
data = list(K=ncol(C_k),M=nrow(simdat$X),L=nrow(C_k),Y=simdat$Y,N=ncol(simdat$Y),C=C_k,X=simdat$X, beta_sd=0.5),
include = T,
pars = c("beta","tau"),
# init=0,
chains = 4,             # number of Markov chains
warmup = 1000,          # number of warmup iterations per chain
iter = 2000,            # total number of iterations per chain
cores = 4,              # number of cores (could use one per chain)
refresh = 200,             # no progress shown
verbose = T
)
fit <- stan(
file = "/inst/stan/diffsig.stan",  # Stan program
data = list(K=ncol(C_k),M=nrow(simdat$X),L=nrow(C_k),Y=simdat$Y,N=ncol(simdat$Y),C=C_k,X=simdat$X, beta_sd=0.5),
include = T,
pars = c("beta","tau"),
# init=0,
chains = 4,             # number of Markov chains
warmup = 1000,          # number of warmup iterations per chain
iter = 2000,            # total number of iterations per chain
cores = 4,              # number of cores (could use one per chain)
refresh = 200,             # no progress shown
verbose = T
)
fit <- stan(
file = "./inst/stan/diffsig.stan",  # Stan program
data = list(K=ncol(C_k),M=nrow(simdat$X),L=nrow(C_k),Y=simdat$Y,N=ncol(simdat$Y),C=C_k,X=simdat$X, beta_sd=0.5),
include = T,
pars = c("beta","tau"),
# init=0,
chains = 4,             # number of Markov chains
warmup = 1000,          # number of warmup iterations per chain
iter = 2000,            # total number of iterations per chain
cores = 4,              # number of cores (could use one per chain)
refresh = 200,             # no progress shown
verbose = T
)
mu_tau_summary <- summary(fit, pars = c("beta"), probs = c(0.1, 0.9))$summary
data.frame(Rhat =mu_tau_summary[,"Rhat"])
rstan::traceplot(fit, pars="beta")
(eval_res = diffsig_eval(truebeta = truebeta, fit = fit, ci_level = 80))
#' Diffsig coverage and root mean squared error (RMSE) calculation function
#'
#' @export
#' @param truebeta a vector of true betas
#' @param fit a `stanfit` object returned by `rstan::stan`
#' @param coverage a 2-dimension vector of lower/upper credible interval
#' @param beta_sd standard deviation for sampling hyperparameter beta
#' @param ... Arguments passed to `rstan::stan` (e.g. thin, init, ...).
#' @return An object of class `stanfit` returned by `rstan::stan`
#'
diffsig_eval <- function(truebeta, fit, ci_level=80, include = T, ...) {
if (class(fit)!="stanfit") {
stop("fit has to be a stanfit object from rstan package")
}
truebeta = c(t(simdat$truebeta))
ci_low = (100-ci_level)/2/100
ci_up = 1-ci_low
estimate= c()
for (i in 1:length(truebeta)) {
estimate= rbind(estimate,summary(fit, pars="beta", probs=c(ci_low,ci_up))$summary[i,c(1,4,5)])
}
estimate = as.data.frame(cbind(truebeta,estimate))
colnames(estimate) = c("truebeta","estimate","min","max")
for (i in 1:length(truebeta)) {
estimate$contain[i] = estimate[i,"truebeta"] > estimate[i,"min"] && estimate[i,"truebeta"] < estimate[i,"max"]
estimate$rmse[i] = sqrt(mean((estimate$truebeta[i] - estimate$estimate[i])^2))
}
colnames(estimate) = c("truebeta","estimate","10%","90%","contain","rmse")
return(list(estimate, perc_coverage=mean(estimate$contain), mean_rmse=mean(estimate$rmse)))
}
(eval_res = diffsig_eval(truebeta = truebeta, fit = fit, ci_level = 80))
numpars = ncol(simdat$truebeta)*ncol(simdat$truebeta) #15
diffsig_plot(fit,
pars=1:numpars,
ci_level = 80,
signature_labels = c("SBS1","SBS2","SBS3","SBS5","SBS13"),
riskfactor_labels = c("intercept","cont1","cont2"),
ncol=1, outlist = F)
numpars
ncol(simdat$truebeta)
numpars = ncol(simdat$truebeta)*nrow(simdat$truebeta) #15
diffsig_plot(fit,
pars=1:numpars,
ci_level = 80,
signature_labels = c("SBS1","SBS2","SBS3","SBS5","SBS13"),
riskfactor_labels = c("intercept","cont1","cont2"),
ncol=1, outlist = F)
prod(dim(simdat$truebeta))
diffsig_plot(fit,
pars=1:numpars,
ci_level = 80,
signature_labels = c("SBS1","SBS2","SBS3","SBS5","SBS13"),
riskfactor_labels = c("intercept","cont1","cont2"),
ncol=1, outlist = F)
diffsig_plot(fit,
pars=1:numpars,
ci_level = 80,
signature_labels = c("SBS1","SBS2","SBS3","SBS5","SBS13"),
riskfactor_labels = c("intercept","cont1","cont2"),
ncol=3, outlist = F)
diffsig_plot(fit,
pars=1:numpars,
ci_level = 80,
signature_labels = c("SBS1","SBS2","SBS3","SBS5","SBS13"),
riskfactor_labels = c("intercept","cont1","cont2"),
ncol=1, outlist = T)
diffsig_plot(fit,
pars=1:numpars,
ci_level = 80,
signature_labels = c("SBS1","SBS2","SBS3","SBS5","SBS13"),
riskfactor_labels = c("intercept","cont1","cont2"),
colors=c("#D81B60","#1E88E5","#FFC107"),
est_color="#F5F3EF",
ncol=1,
outlist=FALSE) +
geom_point(aes(y=15:1,x=simdat$truebeta),shape=3)
diffsig_plot(fit,
pars=1:numpars,
ci_level = 80,
signature_labels = c("SBS1","SBS2","SBS3","SBS5","SBS13"),
riskfactor_labels = c("intercept","cont1","cont2"),
colors=c("#D81B60","#1E88E5","#FFC107"),
est_color="#F5F3EF",
ncol=1,
outlist=FALSE)
diffsig_plot(fit,
pars=1:numpars,
ci_level = 80,
signature_labels = c("SBS1","SBS2","SBS3","SBS5","SBS13"),
riskfactor_labels = c("intercept","cont1","cont2"),
colors=c("#D81B60","#1E88E5","#FFC107"),
est_color="#F5F3EF",
ncol=1,
outlist=FALSE)
summary(fit)
eval_res$``
eval_res
eval_res[[1]]
set.seed(123)
simdat = simdat_gen(N=N, K=K, truetau=truetau, C=C_k,
continuous=2, binary=NA, categorical=NA, cat_levels=NA, seed=123)
fit <- stan(
file = "./inst/stan/diffsig.stan",  # Stan program
data = list(K=ncol(C_k),M=nrow(simdat$X),L=nrow(C_k),Y=simdat$Y,N=ncol(simdat$Y),C=C_k,X=simdat$X, beta_sd=0.5),
include = T,
pars = c("beta","tau"),
# init=0,
chains = 4,             # number of Markov chains
warmup = 1000,          # number of warmup iterations per chain
iter = 2000,            # total number of iterations per chain
cores = 4,              # number of cores (could use one per chain)
refresh = 200,             # no progress shown
verbose = T
)
mu_tau_summary <- summary(fit, pars = c("beta"), probs = c(0.1, 0.9))$summary
data.frame(Rhat =mu_tau_summary[,"Rhat"])
rstan::traceplot(fit, pars="beta")
(eval_res = diffsig_eval(truebeta = truebeta, fit = fit, ci_level = 80))
numpars = prod(dim(simdat$truebeta)) #15
diffsig_plot(fit,
pars=1:numpars,
ci_level = 80,
signature_labels = c("SBS1","SBS2","SBS3","SBS5","SBS13"),
riskfactor_labels = c("intercept","cont1","cont2"),
ncol=1, outlist = F)
diffsig_plot(fit,
pars=1:numpars,
ci_level = 80,
signature_labels = c("SBS1","SBS2","SBS3","SBS5","SBS13"),
riskfactor_labels = c("intercept","cont1","cont2"),
ncol=3, outlist = F)
diffsig_plot(fit,
pars=1:numpars,
ci_level = 80,
signature_labels = c("SBS1","SBS2","SBS3","SBS5","SBS13"),
riskfactor_labels = c("intercept","cont1","cont2"),
ncol=1, outlist = T)
diffsig_plot(fit,
pars=1:numpars,
ci_level = 80,
signature_labels = c("SBS1","SBS2","SBS3","SBS5","SBS13"),
riskfactor_labels = c("intercept","cont1","cont2"),
colors=c("#D81B60","#1E88E5","#FFC107"),
est_color="#F5F3EF",
ncol=1,
outlist=FALSE)
eval_res[[1]]
eval_res[[1]][,2]
eval_res[[1]][6,2]
eval_res[[1]][6,2]
eval_res[[1]][7,2]
round(eval_res[[1]][6,2],2)
round(eval_res[[1]][7,2],2)
round(eval_res[[1]][11,2],2)
round(eval_res[[1]][12,2],2)
round(eval_res[[1]][6,2],2)
round(eval_res[[1]][11,2],2)
round(eval_res[[1]][6,2],2)
round(eval_res[[1]][7,2],2)
round(eval_res[[1]][7,2],2)
round(eval_res[[1]][12,2],2)
devtools::document()
devtools::document()
getwd()
roxygen2::roxygenize()
getwd()
roxygen2::roxygenise()
load_all()
?load_all
devtools::load_all()
devtools::load_all()
devtools::load_all()
roxygen2::roxygenise()
devtools::document()
knitr::opts_chunk$set(cache=FALSE, message=FALSE, warning=FALSE)
library(diffsig)
N = 50
K = 5
truetau = 100
C = read.table("https://cancer.sanger.ac.uk/signatures/documents/453/COSMIC_v3.2_SBS_GRCh38.txt", header = T, row.names = 1)
C_k =  C[,c("SBS1","SBS2","SBS3","SBS5","SBS13")]
set.seed(123)
simdat = simdat_gen(N=N, K=K, truetau=truetau, C=C_k,
continuous=2, binary=NA, categorical=NA, cat_levels=NA, seed=123)
fit <- diffsig_fit(X=simdat$X, Y=simdat$Y, C=C_k, beta_sd=0.5,
chains=4, cores=4, seed=123)
parallel::detectCores()
?diffsig_fit
fit <- stan(
file = "./inst/stan/diffsig.stan",  # Stan program
data = list(K=K,M=3,L=96,Y=simdat$Y,N=N,C=C_k,X=simdat$X, beta_sd=0.5),
include = T,
pars = c("beta","tau"),
# init=0,
chains = 4,             # number of Markov chains
warmup = 1000,          # number of warmup iterations per chain
iter = 2000,            # total number of iterations per chain
cores = 4,              # number of cores (could use one per chain)
refresh = 200,             # no progress shown
verbose = T
)
mu_tau_summary <- summary(fit, pars = c("beta"), probs = c(0.1, 0.9))$summary
data.frame(Rhat =mu_tau_summary[,"Rhat"])
rstan::traceplot(fit, pars="beta")
(eval_res = diffsig_eval(truebeta = truebeta, fit = fit, ci_level = 80))
diffsig_eval
(eval_res = diffsig_eval(truebeta = simdat$truebeta, fit = fit, ci_level = 80))
simdat$truebeta
diffsig_eval
#' Diffsig coverage and root mean squared error (RMSE) calculation function
#'
#' @export
#' @param truebeta a vector of true betas
#' @param fit a `stanfit` object returned by `rstan::stan`
#' @param coverage a 2-dimension vector of lower/upper credible interval
#' @param beta_sd standard deviation for sampling hyperparameter beta
#' @param ... Arguments passed to `rstan::stan` (e.g. thin, init, ...).
#' @return An object of class `stanfit` returned by `rstan::stan`
#'
diffsig_eval <- function(truebeta, fit, ci_level=80, include = T, ...) {
if (class(fit)!="stanfit") {
stop("fit has to be a stanfit object from rstan package")
}
truebeta = c(t(truebeta))
ci_low = (100-ci_level)/2/100
ci_up = 1-ci_low
estimate= c()
for (i in 1:length(truebeta)) {
estimate= rbind(estimate,summary(fit, pars="beta", probs=c(ci_low,ci_up))$summary[i,c(1,4,5)])
}
estimate = as.data.frame(cbind(truebeta,estimate))
colnames(estimate) = c("truebeta","estimate","min","max")
for (i in 1:length(truebeta)) {
estimate$contain[i] = estimate[i,"truebeta"] > estimate[i,"min"] && estimate[i,"truebeta"] < estimate[i,"max"]
estimate$rmse[i] = sqrt(mean((estimate$truebeta[i] - estimate$estimate[i])^2))
}
colnames(estimate) = c("truebeta","estimate","10%","90%","contain","rmse")
return(list(estimate,
perc_coverage=mean(estimate$contain),
mean_rmse=mean(estimate$rmse)))
}
(eval_res = diffsig_eval(truebeta = simdat$truebeta, fit = fit, ci_level = 80))
devtools::build()
C = read.table("https://cancer.sanger.ac.uk/signatures/documents/453/COSMIC_v3.2_SBS_GRCh38.txt", header = T, row.names = 1)
C_k =  C[,c("SBS2","SBS3","SBS13")]
save(C_k, file=“data/cosmic_subset.rda”, compress=“xz”)
save(C_k, file="../data/cosmic_subset.rda", compress="xz")
devtools::build()
data(cosmic_subset)
N = 50
K = 3
truetau = 100
C = read.table("https://cancer.sanger.ac.uk/signatures/documents/453/COSMIC_v3.2_SBS_GRCh38.txt", header = T, row.names = 1)
C_k =  C[,c("SBS2","SBS3","SBS13")]
C = read.table("https://cancer.sanger.ac.uk/signatures/documents/453/COSMIC_v3.2_SBS_GRCh38.txt", header = T, row.names = 1)
data(cosmic_subset)
set.seed(123)
simdat = simdat_gen(N=N, K=K, truetau=truetau, C=C_k,
continuous=2, binary=NA, categorical=NA, cat_levels=NA, seed=123)
simdat = simdat_gen(N=N, K=K, truetau=truetau, C=C_k,
continuous=NA, binary=1, categorical=2, cat_levels=c(3,4))
set.seed(123)
simdat = simdat_gen(N=N, K=K, truetau=truetau, C=C_k,
continuous=2, binary=NA, categorical=NA, cat_levels=NA, seed=123)
head(simdat$truebeta)
head(simdat$Y)
fit <- diffsig_fit(X=simdat$X, Y=simdat$Y, C=C_k, beta_sd=0.5,
chains=4, cores=4, seed=123)
devtools::load_all()
fit <- diffsig_fit(X=simdat$X, Y=simdat$Y, C=C_k, beta_sd=0.5,
chains=2, cores=2, seed=123)
?sampling
?rstan::sampling
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
knitr::opts_chunk$set(cache=FALSE, message=FALSE, warning=FALSE)
library(diffsig)
N = 50
K = 3
truetau = 100
data(cosmic_subset)
set.seed(123)
simdat = simdat_gen(N=N, K=K, truetau=truetau, C=C_k,
continuous=2, binary=NA, categorical=NA, cat_levels=NA, seed=123)
head(simdat$truebeta)
head(simdat$Y)
head(simdat$X)
fit <- diffsig_fit(X=simdat$X, Y=simdat$Y, C=C_k, beta_sd=0.5,
chains=2, cores=2, seed=123)
knitr::opts_chunk$set(cache=FALSE, message=FALSE, warning=FALSE)
library(diffsig)
library(rstan)
rstan::traceplot
simdat$truebeta
numpars
prod(dim(simdat$truebeta))
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
