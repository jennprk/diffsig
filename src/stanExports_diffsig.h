// Generated by rstantools.  Do not edit by hand.

/*
    diffsig is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    diffsig is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with diffsig.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_diffsig_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_diffsig");
    reader.add_event(50, 48, "end", "model_diffsig");
    return reader;
}
#include <stan_meta_header.hpp>
class model_diffsig
  : public stan::model::model_base_crtp<model_diffsig> {
private:
        int N;
        int K;
        int M;
        int L;
        std::vector<std::vector<int> > Y;
        double beta_sd;
        matrix_d C;
        matrix_d X;
public:
    model_diffsig(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_diffsig(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_diffsig_namespace::model_diffsig";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 0);
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "K", "int", context__.to_vec());
            K = int(0);
            vals_i__ = context__.vals_i("K");
            pos__ = 0;
            K = vals_i__[pos__++];
            check_greater_or_equal(function__, "K", K, 0);
            current_statement_begin__ = 5;
            context__.validate_dims("data initialization", "M", "int", context__.to_vec());
            M = int(0);
            vals_i__ = context__.vals_i("M");
            pos__ = 0;
            M = vals_i__[pos__++];
            check_greater_or_equal(function__, "M", M, 0);
            current_statement_begin__ = 6;
            context__.validate_dims("data initialization", "L", "int", context__.to_vec());
            L = int(0);
            vals_i__ = context__.vals_i("L");
            pos__ = 0;
            L = vals_i__[pos__++];
            check_greater_or_equal(function__, "L", L, 0);
            current_statement_begin__ = 7;
            validate_non_negative_index("Y", "L", L);
            validate_non_negative_index("Y", "N", N);
            context__.validate_dims("data initialization", "Y", "int", context__.to_vec(L,N));
            Y = std::vector<std::vector<int> >(L, std::vector<int>(N, int(0)));
            vals_i__ = context__.vals_i("Y");
            pos__ = 0;
            size_t Y_k_0_max__ = L;
            size_t Y_k_1_max__ = N;
            for (size_t k_1__ = 0; k_1__ < Y_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < Y_k_0_max__; ++k_0__) {
                    Y[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            size_t Y_i_0_max__ = L;
            size_t Y_i_1_max__ = N;
            for (size_t i_0__ = 0; i_0__ < Y_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < Y_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "Y[i_0__][i_1__]", Y[i_0__][i_1__], 0);
                }
            }
            current_statement_begin__ = 8;
            context__.validate_dims("data initialization", "beta_sd", "double", context__.to_vec());
            beta_sd = double(0);
            vals_r__ = context__.vals_r("beta_sd");
            pos__ = 0;
            beta_sd = vals_r__[pos__++];
            check_greater_or_equal(function__, "beta_sd", beta_sd, 0);
            current_statement_begin__ = 9;
            validate_non_negative_index("C", "L", L);
            validate_non_negative_index("C", "K", K);
            context__.validate_dims("data initialization", "C", "matrix_d", context__.to_vec(L,K));
            C = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(L, K);
            vals_r__ = context__.vals_r("C");
            pos__ = 0;
            size_t C_j_2_max__ = K;
            size_t C_j_1_max__ = L;
            for (size_t j_2__ = 0; j_2__ < C_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < C_j_1_max__; ++j_1__) {
                    C(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            check_greater_or_equal(function__, "C", C, 0);
            check_less_or_equal(function__, "C", C, 1);
            current_statement_begin__ = 10;
            validate_non_negative_index("X", "M", M);
            validate_non_negative_index("X", "N", N);
            context__.validate_dims("data initialization", "X", "matrix_d", context__.to_vec(M,N));
            X = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(M, N);
            vals_r__ = context__.vals_r("X");
            pos__ = 0;
            size_t X_j_2_max__ = N;
            size_t X_j_1_max__ = M;
            for (size_t j_2__ = 0; j_2__ < X_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_j_1_max__; ++j_1__) {
                    X(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 14;
            num_params_r__ += 1;
            current_statement_begin__ = 15;
            validate_non_negative_index("phi", "K", K);
            validate_non_negative_index("phi", "N", N);
            num_params_r__ += ((K - 1) * N);
            current_statement_begin__ = 16;
            validate_non_negative_index("beta", "M", M);
            validate_non_negative_index("beta", "K", K);
            num_params_r__ += (M * K);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_diffsig() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 14;
        if (!(context__.contains_r("tau")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable tau missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("tau");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "tau", "double", context__.to_vec());
        double tau(0);
        tau = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, tau);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable tau: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 15;
        if (!(context__.contains_r("phi")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable phi missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("phi");
        pos__ = 0U;
        validate_non_negative_index("phi", "K", K);
        validate_non_negative_index("phi", "N", N);
        context__.validate_dims("parameter initialization", "phi", "vector_d", context__.to_vec(N,K));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > phi(N, Eigen::Matrix<double, Eigen::Dynamic, 1>(K));
        size_t phi_j_1_max__ = K;
        size_t phi_k_0_max__ = N;
        for (size_t j_1__ = 0; j_1__ < phi_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < phi_k_0_max__; ++k_0__) {
                phi[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t phi_i_0_max__ = N;
        for (size_t i_0__ = 0; i_0__ < phi_i_0_max__; ++i_0__) {
            try {
                writer__.simplex_unconstrain(phi[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable phi: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 16;
        if (!(context__.contains_r("beta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta");
        pos__ = 0U;
        validate_non_negative_index("beta", "M", M);
        validate_non_negative_index("beta", "K", K);
        context__.validate_dims("parameter initialization", "beta", "matrix_d", context__.to_vec(M,K));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> beta(M, K);
        size_t beta_j_2_max__ = K;
        size_t beta_j_1_max__ = M;
        for (size_t j_2__ = 0; j_2__ < beta_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                beta(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_unconstrain(beta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 14;
            local_scalar_t__ tau;
            (void) tau;  // dummy to suppress unused var warning
            if (jacobian__)
                tau = in__.scalar_lb_constrain(0, lp__);
            else
                tau = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 15;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > phi;
            size_t phi_d_0_max__ = N;
            phi.reserve(phi_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < phi_d_0_max__; ++d_0__) {
                if (jacobian__)
                    phi.push_back(in__.simplex_constrain(K, lp__));
                else
                    phi.push_back(in__.simplex_constrain(K));
            }
            current_statement_begin__ = 16;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> beta;
            (void) beta;  // dummy to suppress unused var warning
            if (jacobian__)
                beta = in__.matrix_constrain(M, K, lp__);
            else
                beta = in__.matrix_constrain(M, K);
            // transformed parameters
            current_statement_begin__ = 20;
            validate_non_negative_index("alpha", "K", K);
            validate_non_negative_index("alpha", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> alpha(K, N);
            stan::math::initialize(alpha, DUMMY_VAR__);
            stan::math::fill(alpha, DUMMY_VAR__);
            current_statement_begin__ = 21;
            validate_non_negative_index("sm_alpha", "K", K);
            validate_non_negative_index("sm_alpha", "N", N);
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > sm_alpha(N, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(K));
            stan::math::initialize(sm_alpha, DUMMY_VAR__);
            stan::math::fill(sm_alpha, DUMMY_VAR__);
            current_statement_begin__ = 22;
            validate_non_negative_index("pi", "L", L);
            validate_non_negative_index("pi", "N", N);
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > pi(N, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(L));
            stan::math::initialize(pi, DUMMY_VAR__);
            stan::math::fill(pi, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 24;
            stan::math::assign(alpha, multiply(transpose(beta), X));
            current_statement_begin__ = 26;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 27;
                stan::model::assign(sm_alpha, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            softmax(stan::model::rvalue(alpha, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list())), "alpha")), 
                            "assigning variable sm_alpha");
            }
            current_statement_begin__ = 30;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 31;
                stan::model::assign(pi, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            multiply(C, get_base1(phi, n, "phi", 1)), 
                            "assigning variable pi");
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 20;
            size_t alpha_j_1_max__ = K;
            size_t alpha_j_2_max__ = N;
            for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < alpha_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(alpha(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: alpha" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable alpha: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 21;
            size_t sm_alpha_k_0_max__ = N;
            size_t sm_alpha_j_1_max__ = K;
            for (size_t k_0__ = 0; k_0__ < sm_alpha_k_0_max__; ++k_0__) {
                for (size_t j_1__ = 0; j_1__ < sm_alpha_j_1_max__; ++j_1__) {
                    if (stan::math::is_uninitialized(sm_alpha[k_0__](j_1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: sm_alpha" << "[" << k_0__ << "]" << "(" << j_1__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable sm_alpha: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            size_t sm_alpha_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < sm_alpha_i_0_max__; ++i_0__) {
                stan::math::check_simplex(function__, "sm_alpha[i_0__]", sm_alpha[i_0__]);
            }
            current_statement_begin__ = 22;
            size_t pi_k_0_max__ = N;
            size_t pi_j_1_max__ = L;
            for (size_t k_0__ = 0; k_0__ < pi_k_0_max__; ++k_0__) {
                for (size_t j_1__ = 0; j_1__ < pi_j_1_max__; ++j_1__) {
                    if (stan::math::is_uninitialized(pi[k_0__](j_1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: pi" << "[" << k_0__ << "]" << "(" << j_1__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable pi: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            size_t pi_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < pi_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "pi[i_0__]", pi[i_0__], 0);
            }
            // model body
            current_statement_begin__ = 36;
            lp_accum__.add(lognormal_log<propto__>(tau, 0, 2));
            current_statement_begin__ = 39;
            for (int m = 1; m <= M; ++m) {
                current_statement_begin__ = 40;
                for (int k = 1; k <= K; ++k) {
                    current_statement_begin__ = 41;
                    lp_accum__.add(normal_log<propto__>(get_base1(beta, m, k, "beta", 1), 0, beta_sd));
                }
            }
            current_statement_begin__ = 43;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 44;
                lp_accum__.add(dirichlet_log<propto__>(get_base1(phi, n, "phi", 1), multiply(get_base1(sm_alpha, n, "sm_alpha", 1), tau)));
            }
            current_statement_begin__ = 46;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 47;
                lp_accum__.add(multinomial_log<propto__>(stan::model::rvalue(Y, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list())), "Y"), get_base1(pi, n, "pi", 1)));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("tau");
        names__.push_back("phi");
        names__.push_back("beta");
        names__.push_back("alpha");
        names__.push_back("sm_alpha");
        names__.push_back("pi");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dims__.push_back(L);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_diffsig_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double tau = in__.scalar_lb_constrain(0);
        vars__.push_back(tau);
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > phi;
        size_t phi_d_0_max__ = N;
        phi.reserve(phi_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < phi_d_0_max__; ++d_0__) {
            phi.push_back(in__.simplex_constrain(K));
        }
        size_t phi_j_1_max__ = K;
        size_t phi_k_0_max__ = N;
        for (size_t j_1__ = 0; j_1__ < phi_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < phi_k_0_max__; ++k_0__) {
                vars__.push_back(phi[k_0__](j_1__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> beta = in__.matrix_constrain(M, K);
        size_t beta_j_2_max__ = K;
        size_t beta_j_1_max__ = M;
        for (size_t j_2__ = 0; j_2__ < beta_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                vars__.push_back(beta(j_1__, j_2__));
            }
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 20;
            validate_non_negative_index("alpha", "K", K);
            validate_non_negative_index("alpha", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> alpha(K, N);
            stan::math::initialize(alpha, DUMMY_VAR__);
            stan::math::fill(alpha, DUMMY_VAR__);
            current_statement_begin__ = 21;
            validate_non_negative_index("sm_alpha", "K", K);
            validate_non_negative_index("sm_alpha", "N", N);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > sm_alpha(N, Eigen::Matrix<double, Eigen::Dynamic, 1>(K));
            stan::math::initialize(sm_alpha, DUMMY_VAR__);
            stan::math::fill(sm_alpha, DUMMY_VAR__);
            current_statement_begin__ = 22;
            validate_non_negative_index("pi", "L", L);
            validate_non_negative_index("pi", "N", N);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > pi(N, Eigen::Matrix<double, Eigen::Dynamic, 1>(L));
            stan::math::initialize(pi, DUMMY_VAR__);
            stan::math::fill(pi, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 24;
            stan::math::assign(alpha, multiply(transpose(beta), X));
            current_statement_begin__ = 26;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 27;
                stan::model::assign(sm_alpha, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            softmax(stan::model::rvalue(alpha, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list())), "alpha")), 
                            "assigning variable sm_alpha");
            }
            current_statement_begin__ = 30;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 31;
                stan::model::assign(pi, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            multiply(C, get_base1(phi, n, "phi", 1)), 
                            "assigning variable pi");
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 21;
            size_t sm_alpha_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < sm_alpha_i_0_max__; ++i_0__) {
                stan::math::check_simplex(function__, "sm_alpha[i_0__]", sm_alpha[i_0__]);
            }
            current_statement_begin__ = 22;
            size_t pi_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < pi_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "pi[i_0__]", pi[i_0__], 0);
            }
            // write transformed parameters
            if (include_tparams__) {
                size_t alpha_j_2_max__ = N;
                size_t alpha_j_1_max__ = K;
                for (size_t j_2__ = 0; j_2__ < alpha_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
                        vars__.push_back(alpha(j_1__, j_2__));
                    }
                }
                size_t sm_alpha_j_1_max__ = K;
                size_t sm_alpha_k_0_max__ = N;
                for (size_t j_1__ = 0; j_1__ < sm_alpha_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < sm_alpha_k_0_max__; ++k_0__) {
                        vars__.push_back(sm_alpha[k_0__](j_1__));
                    }
                }
                size_t pi_j_1_max__ = L;
                size_t pi_k_0_max__ = N;
                for (size_t j_1__ = 0; j_1__ < pi_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < pi_k_0_max__; ++k_0__) {
                        vars__.push_back(pi[k_0__](j_1__));
                    }
                }
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_diffsig";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau";
        param_names__.push_back(param_name_stream__.str());
        size_t phi_j_1_max__ = K;
        size_t phi_k_0_max__ = N;
        for (size_t j_1__ = 0; j_1__ < phi_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < phi_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "phi" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t beta_j_2_max__ = K;
        size_t beta_j_1_max__ = M;
        for (size_t j_2__ = 0; j_2__ < beta_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t alpha_j_2_max__ = N;
            size_t alpha_j_1_max__ = K;
            for (size_t j_2__ = 0; j_2__ < alpha_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "alpha" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t sm_alpha_j_1_max__ = K;
            size_t sm_alpha_k_0_max__ = N;
            for (size_t j_1__ = 0; j_1__ < sm_alpha_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < sm_alpha_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "sm_alpha" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t pi_j_1_max__ = L;
            size_t pi_k_0_max__ = N;
            for (size_t j_1__ = 0; j_1__ < pi_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < pi_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "pi" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau";
        param_names__.push_back(param_name_stream__.str());
        size_t phi_j_1_max__ = (K - 1);
        size_t phi_k_0_max__ = N;
        for (size_t j_1__ = 0; j_1__ < phi_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < phi_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "phi" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t beta_j_2_max__ = K;
        size_t beta_j_1_max__ = M;
        for (size_t j_2__ = 0; j_2__ < beta_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t alpha_j_2_max__ = N;
            size_t alpha_j_1_max__ = K;
            for (size_t j_2__ = 0; j_2__ < alpha_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "alpha" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t sm_alpha_j_1_max__ = (K - 1);
            size_t sm_alpha_k_0_max__ = N;
            for (size_t j_1__ = 0; j_1__ < sm_alpha_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < sm_alpha_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "sm_alpha" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t pi_j_1_max__ = L;
            size_t pi_k_0_max__ = N;
            for (size_t j_1__ = 0; j_1__ < pi_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < pi_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "pi" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_diffsig_namespace::model_diffsig stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
